[1 of 1] Compiling Try              ( Try.hs, Try.o )

==================== Renamer ====================
Try.tiletrans
  ((!dlist_aTK_amY), (!sel_aTL_amZ), tilist_aTM_an0)
  (('c' : (!((!'s') : (!(' ' : (!rest_aTN_an1)))))) : inpt_aTO_an9)
  = if Try.indgrid nstoilrest_aTQ_anb then
        (linecircs_aTU_anf ++ wnstoilrest_aTR_anc, 
         (newele_aTT_ane : dlist_aTK_amY, sel_aTL_amZ, tilist_aTM_an0), 
         inpt_aTO_an9)
    else
        ("", (dlist_aTK_amY, sel_aTL_amZ, tilist_aTM_an0), inpt_aTO_an9)
  where
      nearline_aTP_ana
        (![(!x0_aTV_ang), y0_aTW_anh, (!x1_aTX_ani), y1_aTY_anj])
        = [Try.nearx x0_aTV_ang, Try.neary y0_aTW_anh,
           Try.nearx x1_aTX_ani, Try.neary y1_aTY_anj]
      (!nstoilrest_aTQ_anb) = nearline_aTP_ana (Try.stoil rest_aTN_an1)
      (!wnstoilrest_aTR_anc) = Try.wline nstoilrest_aTQ_anb
      (!cssr_aTS_and) = Try.cs nstoilrest_aTQ_anb
      newele_aTT_ane = (nstoilrest_aTQ_anb, snd cssr_aTS_and)
      (!linecircs_aTU_anf) = fst cssr_aTS_and
Try.indgrid = undefined
Try.nearx = undefined
Try.neary = undefined
Try.stoil = undefined
Try.wline = undefined
Try.cs = undefined


==================== Demand analysis ====================
Result size of Demand analysis
  = {terms: 134, types: 361, coercions: 0}

cs :: forall t_anv. t_anv
[LclIdX,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
cs = undefined

indgrid :: forall t_aoj. t_aoj
[LclIdX,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
indgrid = undefined

nearx :: forall t_ao9. t_ao9
[LclIdX,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
nearx = undefined

neary :: forall t_anZ. t_anZ
[LclIdX,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
neary = undefined

stoil :: forall t_anP. t_anP
[LclIdX,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
stoil = undefined

wline :: forall t_anF. t_anF
[LclIdX,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
wline = undefined

poly_fail_stM
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     GHC.Prim.Void#
     -> ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Arity=1,
 CallArity=1,
 Str=DmdType <B,A>b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 130 0}]
poly_fail_stM =
  \ (@ t_aq2)
    (@ b_aq3)
    (@ t_aq4)
    (@ t_aq5)
    _ [Occ=Dead, Dmd=<B,A>, OS=OneShot] ->
    Control.Exception.Base.patError
      @ ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
      "Try.hs:(4,1)-(19,37)|function tiletrans"#

lvl_stN
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
lvl_stN =
  \ (@ t_aq2) (@ b_aq3) (@ t_aq4) (@ t_aq5) ->
    poly_fail_stM @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5 GHC.Prim.void#

lvl_stO
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
lvl_stO =
  \ (@ t_aq2) (@ b_aq3) (@ t_aq4) (@ t_aq5) ->
    poly_fail_stM @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5 GHC.Prim.void#

lvl_stP
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
lvl_stP =
  \ (@ t_aq2) (@ b_aq3) (@ t_aq4) (@ t_aq5) ->
    poly_fail_stM @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5 GHC.Prim.void#

lvl_stQ
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
lvl_stQ =
  \ (@ t_aq2) (@ b_aq3) (@ t_aq4) (@ t_aq5) ->
    poly_fail_stM @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5 GHC.Prim.void#

lvl_stR
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
lvl_stR =
  \ (@ t_aq2) (@ b_aq3) (@ t_aq4) (@ t_aq5) ->
    poly_fail_stM @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5 GHC.Prim.void#

lvl_stS
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
lvl_stS =
  \ (@ t_aq2) (@ b_aq3) (@ t_aq4) (@ t_aq5) ->
    poly_fail_stM @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5 GHC.Prim.void#

lvl_stT
  :: forall t_aq2 b_aq3 t_aq4 t_aq5.
     ([Char], ([([t_aq2], b_aq3)], t_aq4, t_aq5), [[Char]])
[LclId,
 Str=DmdType b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
lvl_stT =
  \ (@ t_aq2) (@ b_aq3) (@ t_aq4) (@ t_aq5) ->
    poly_fail_stM @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5 GHC.Prim.void#

tiletrans
  :: forall t_apX b_apY t_apZ t_aq0.
     ([([t_apX], b_apY)], t_apZ, t_aq0)
     -> [[Char]]
     -> ([Char], ([([t_apX], b_apY)], t_apZ, t_aq0), [[Char]])
[LclIdX,
 Arity=2,
 Str=DmdType <B,1*U(1*U,1*U,A)><B,1*U>b,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 30] 210 0}]
tiletrans =
  \ (@ t_aq2)
    (@ b_aq3)
    (@ t_aq4)
    (@ t_aq5)
    (ds_dqE [Dmd=<B,1*U(1*U,1*U,A)>]
       :: ([([t_aq2], b_aq3)], t_aq4, t_aq5))
    (ds_dqF [Dmd=<B,1*U>] :: [[Char]]) ->
    case ds_dqE
    of _ [Occ=Dead, Dmd=<B,A>]
    { (dlist_aTK_amY [Dmd=<B,1*U>], sel_aTL_amZ [Dmd=<B,1*U>], tilist_aTM_an0 [Dmd=<B,A>]) ->
    case dlist_aTK_amY of _ [Occ=Dead, Dmd=<B,A>] { __DEFAULT ->
    case sel_aTL_amZ of _ [Occ=Dead, Dmd=<B,A>] { __DEFAULT ->
    case ds_dqF of _ [Occ=Dead, Dmd=<B,A>] {
      [] -> lvl_stN @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5;
      : ds_dqG [Dmd=<B,1*U>] inpt_aTO_an9 [Dmd=<B,A>] ->
        case ds_dqG of _ [Occ=Dead, Dmd=<B,A>] {
          [] -> lvl_stO @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5;
          : ds_dqH [Dmd=<B,1*U(1*U)>] ds_dqI [Dmd=<B,1*U>] ->
            case ds_dqH
            of _ [Occ=Dead, Dmd=<B,A>] { GHC.Types.C# ds_dqJ [Dmd=<B,1*U>] ->
            case ds_dqJ of _ [Occ=Dead, Dmd=<B,A>] {
              __DEFAULT -> lvl_stP @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5;
              'c' ->
                case ds_dqI of _ [Occ=Dead, Dmd=<B,A>] {
                  [] -> lvl_stQ @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5;
                  : ds_dqK [Dmd=<B,1*U(1*U)>] ds_dqL [Dmd=<B,1*U>] ->
                    case ds_dqK
                    of _ [Occ=Dead, Dmd=<B,A>] { GHC.Types.C# ds_dqM [Dmd=<B,1*U>] ->
                    case ds_dqM of _ [Occ=Dead, Dmd=<B,A>] {
                      __DEFAULT -> lvl_stR @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5;
                      's' ->
                        case ds_dqL of _ [Occ=Dead, Dmd=<B,A>] {
                          [] -> lvl_stS @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5;
                          : ds_dqN [Dmd=<B,1*U(1*U)>] rest_aTN_an1 [Dmd=<B,1*U>] ->
                            case ds_dqN
                            of _ [Occ=Dead, Dmd=<B,A>] { GHC.Types.C# ds_dqO [Dmd=<B,1*U>] ->
                            case ds_dqO of _ [Occ=Dead, Dmd=<B,A>] {
                              __DEFAULT -> lvl_stT @ t_aq2 @ b_aq3 @ t_aq4 @ t_aq5;
                              ' ' ->
                                case rest_aTN_an1 of _ [Occ=Dead, Dmd=<B,A>] { __DEFAULT ->
                                case undefined of wild_00 [Dmd=<B,A>] { }
                                }
                            }
                            }
                        }
                    }
                    }
                }
            }
            }
        }
    }
    }
    }
    }



